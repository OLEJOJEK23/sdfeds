-- Создание таблицы countries
CREATE TABLE countries (
    id SERIAL PRIMARY KEY,
    name TEXT NOT NULL UNIQUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Создание таблицы regions
CREATE TABLE regions (
    id SERIAL PRIMARY KEY,
    name TEXT NOT NULL UNIQUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Создание таблицы cities
CREATE TABLE cities (
    id SERIAL PRIMARY KEY,
    name TEXT NOT NULL,
    region_id INTEGER NOT NULL,
    country_id INTEGER NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (region_id) REFERENCES regions(id) ON DELETE RESTRICT,
    FOREIGN KEY (country_id) REFERENCES countries(id) ON DELETE RESTRICT
);

-- Создание таблицы experiences
CREATE TABLE experiences (
    id SERIAL PRIMARY KEY,
    name TEXT NOT NULL UNIQUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Создание таблицы service_names
CREATE TABLE service_names (
    id SERIAL PRIMARY KEY,
    name TEXT NOT NULL UNIQUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Создание таблицы users
CREATE TABLE users (
    id VARCHAR(255) PRIMARY KEY,
    email VARCHAR(255) UNIQUE,
    display_name VARCHAR(255),
    phone VARCHAR(20),
    photo_url TEXT,
    rating DECIMAL(3,1) DEFAULT 5.0 CHECK (rating >= 0 AND rating <= 5),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Создание таблицы establishment_types
CREATE TABLE establishment_types (
    id SERIAL PRIMARY KEY,
    type_name TEXT NOT NULL UNIQUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Создание таблицы salons
CREATE TABLE salons (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    place_id VARCHAR(255) NOT NULL UNIQUE,
    name VARCHAR(255) NOT NULL,
    street_address TEXT NOT NULL,
    city_id INTEGER NOT NULL,
    latitude DOUBLE PRECISION NOT NULL,
    longitude DOUBLE PRECISION NOT NULL,
    description TEXT NOT NULL,
    rating DECIMAL(3,1) DEFAULT 0.0 CHECK (rating >= 0 AND rating <= 5),
    photo_url TEXT NOT NULL,
    start_time time without time zone NOT NULL,
    end_time time without time zone NOT NULL,
    establishment_type_id INTEGER NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (city_id) REFERENCES cities(id) ON DELETE RESTRICT,
    FOREIGN KEY (establishment_type_id) REFERENCES establishment_types(id) ON DELETE RESTRICT
);

-- Создание таблицы salon_subscriptions
CREATE TABLE salon_subscriptions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    salon_id UUID NOT NULL,
    plan VARCHAR(50) NOT NULL,
    status VARCHAR(20) NOT NULL DEFAULT 'active',
    start_date TIMESTAMP WITH TIME ZONE NOT NULL,
    end_date TIMESTAMP WITH TIME ZONE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (salon_id) REFERENCES salons(id) ON DELETE CASCADE,
    UNIQUE (salon_id),
    CHECK (status IN ('active', 'expired', 'cancelled')),
    CHECK (end_date > start_date)
);

-- Создание таблицы salon_subscription_transactions
CREATE TABLE salon_subscription_transactions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    salon_id UUID NOT NULL,
    subscription_id UUID NOT NULL,
    amount DECIMAL(10,2),
    payment_method VARCHAR(50),
    transaction_status VARCHAR(20) NOT NULL DEFAULT 'completed',
    transaction_time TIMESTAMP WITH TIME ZONE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (salon_id) REFERENCES salons(id) ON DELETE CASCADE,
    FOREIGN KEY (subscription_id) REFERENCES salon_subscriptions(id) ON DELETE CASCADE,
    CHECK (transaction_status IN ('completed', 'pending', 'failed'))
);

-- Создание таблицы favorite_salons
CREATE TABLE favorite_salons (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id VARCHAR(255) NOT NULL,
    salon_id UUID NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (salon_id) REFERENCES salons(id) ON DELETE CASCADE,
    UNIQUE (user_id, salon_id)
);

-- Создание таблицы services
CREATE TABLE services (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    salon_id UUID NOT NULL,
    service_name_id INTEGER NOT NULL,
    price DECIMAL(10,2),
    duration INTEGER,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (salon_id) REFERENCES salons(id) ON DELETE CASCADE,
    FOREIGN KEY (service_name_id) REFERENCES service_names(id) ON DELETE RESTRICT
);

-- Создание таблицы masters
CREATE TABLE masters (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    salon_id UUID NOT NULL,
    full_name VARCHAR(255) NOT NULL,
    description TEXT,
    experience_id INTEGER NOT NULL,
    photo_url TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (salon_id) REFERENCES salons(id) ON DELETE CASCADE,
    FOREIGN KEY (experience_id) REFERENCES experiences(id) ON DELETE RESTRICT
);

-- Создание таблицы favorite_masters
CREATE TABLE favorite_masters (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id VARCHAR(255) NOT NULL,
    master_id UUID NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (master_id) REFERENCES masters(id) ON DELETE CASCADE,
    UNIQUE (user_id, master_id)
);

-- Создание таблицы bookings
CREATE TABLE bookings (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id VARCHAR(255) NOT NULL,
    salon_id UUID NOT NULL,
    service_id UUID NOT NULL,
    master_id UUID,
    booking_time TIMESTAMP WITH TIME ZONE NOT NULL,
    status VARCHAR(20) NOT NULL DEFAULT 'pending',
    end_time TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (salon_id) REFERENCES salons(id) ON DELETE CASCADE,
    FOREIGN KEY (service_id) REFERENCES services(id) ON DELETE CASCADE,
    FOREIGN KEY (master_id) REFERENCES masters(id) ON DELETE SET NULL,
    CHECK (status IN ('pending', 'confirmed', 'cancelled'))
);

-- Создание таблицы reviews
CREATE TABLE reviews (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id VARCHAR(255) NOT NULL,
    salon_id UUID NOT NULL,
    rating DECIMAL(3,1) NOT NULL CHECK (rating >= 0 AND rating <= 5),
    text TEXT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (salon_id) REFERENCES salons(id) ON DELETE CASCADE
);

-- Создание таблицы visit_history
CREATE TABLE visit_history (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id VARCHAR(255) NOT NULL,
    salon_id UUID NOT NULL,
    booking_id UUID,
    visit_time TIMESTAMP WITH TIME ZONE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (salon_id) REFERENCES salons(id) ON DELETE CASCADE,
    FOREIGN KEY (booking_id) REFERENCES bookings(id) ON DELETE SET NULL
);

-- Создание таблицы special_offers
CREATE TABLE special_offers (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    salon_id UUID NOT NULL,
    title VARCHAR(255) NOT NULL,
    description TEXT NOT NULL,
    photo_url TEXT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (salon_id) REFERENCES salons(id) ON DELETE CASCADE
);

-- Создание таблицы photos
CREATE TABLE photos (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    entity_type VARCHAR(20) NOT NULL CHECK (entity_type IN ('salon', 'master')),
    entity_id UUID NOT NULL,
    photo_path TEXT NOT NULL,
    is_primary BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Индексы
CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_salons_place_id ON salons(place_id);
CREATE INDEX idx_salons_city_id ON salons(city_id);
CREATE INDEX idx_salons_lat_lon ON salons(latitude, longitude);
CREATE INDEX idx_salon_subscriptions_salon_id ON salon_subscriptions(salon_id);
CREATE INDEX idx_salon_subscription_transactions_salon_id ON salon_subscription_transactions(salon_id);
CREATE INDEX idx_salon_subscription_transactions_subscription_id ON salon_subscription_transactions(subscription_id);
CREATE INDEX idx_favorite_salons_user_id ON favorite_salons(user_id);
CREATE INDEX idx_favorite_salons_salon_id ON favorite_salons(salon_id);
CREATE INDEX idx_services_salon_id ON services(salon_id);
CREATE INDEX idx_masters_salon_id ON masters(salon_id);
CREATE INDEX idx_favorite_masters_user_id ON favorite_masters(user_id);
CREATE INDEX idx_favorite_masters_master_id ON favorite_masters(master_id);
CREATE INDEX idx_bookings_user_id ON bookings(user_id);
CREATE INDEX idx_bookings_salon_id ON bookings(salon_id);
CREATE INDEX idx_bookings_service_id ON bookings(service_id);
CREATE INDEX idx_bookings_master_id ON bookings(master_id);
CREATE INDEX idx_bookings_booking_time ON bookings(booking_time);
CREATE INDEX idx_reviews_user_id ON reviews(user_id);
CREATE INDEX idx_reviews_salon_id ON reviews(salon_id);
CREATE INDEX idx_visit_history_user_id ON visit_history(user_id);
CREATE INDEX idx_visit_history_salon_id ON visit_history(salon_id);
CREATE INDEX idx_visit_history_booking_id ON visit_history(booking_id);
CREATE INDEX idx_special_offers_salon_id ON special_offers(salon_id);
CREATE INDEX idx_photos_entity ON photos(entity_type, entity_id);

-- Триггер для updated_at
CREATE OR REPLACE FUNCTION update_timestamp()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_users_timestamp
    BEFORE UPDATE ON users
    FOR EACH ROW
    EXECUTE FUNCTION update_timestamp();

CREATE TRIGGER update_salon_subscriptions_timestamp
    BEFORE UPDATE ON salon_subscriptions
    FOR EACH ROW
    EXECUTE FUNCTION update_timestamp();

-- Триггер для рейтинга салонов
CREATE OR REPLACE FUNCTION update_salon_rating()
RETURNS TRIGGER AS $$
BEGIN
    UPDATE salons
    SET rating = COALESCE((
        SELECT AVG(rating)
        FROM reviews
        WHERE salon_id = salons.id
    ), 0.0)
    WHERE id = (CASE
        WHEN TG_OP = 'INSERT' THEN NEW.salon_id
        WHEN TG_OP = 'UPDATE' THEN NEW.salon_id
        WHEN TG_OP = 'DELETE' THEN OLD.salon_id
    END);
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER sync_salon_rating
    AFTER INSERT OR UPDATE OR DELETE ON reviews
    FOR EACH ROW
    EXECUTE FUNCTION update_salon_rating();

-- Триггер для проверки entity_id в photos
CREATE OR REPLACE FUNCTION check_photos_entity_id()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.entity_type = 'salon' AND NOT EXISTS (
        SELECT 1 FROM salons WHERE id = NEW.entity_id
    ) THEN
        RAISE EXCEPTION 'Invalid entity_id: salon with id % does not exist', NEW.entity_id;
    ELSIF NEW.entity_type = 'master' AND NOT EXISTS (
        SELECT 1 FROM masters WHERE id = NEW.entity_id
    ) THEN
        RAISE EXCEPTION 'Invalid entity_id: master with id % does not exist', NEW.entity_id;
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER validate_photos_entity_id
    BEFORE INSERT OR UPDATE ON photos
    FOR EACH ROW
    EXECUTE FUNCTION check_photos_entity_id();

-- Триггер для каскадного удаления из photos
CREATE OR REPLACE FUNCTION cascade_delete_photos()
RETURNS TRIGGER AS $$
BEGIN
    DELETE FROM photos WHERE entity_type = TG_ARGV[0] AND entity_id = OLD.id;
    RETURN OLD;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER cascade_delete_photos_from_salons
    AFTER DELETE ON salons
    FOR EACH ROW
    EXECUTE FUNCTION cascade_delete_photos('salon');

CREATE TRIGGER cascade_delete_photos_from_masters
    AFTER DELETE ON masters
    FOR EACH ROW
    EXECUTE FUNCTION cascade_delete_photos('master');

-- Функция для автоматического заполнения end_time
CREATE OR REPLACE FUNCTION set_booking_end_time()
RETURNS TRIGGER AS $$
BEGIN
    SELECT NEW.booking_time + (s.duration * INTERVAL '1 minute') INTO NEW.end_time
    FROM services s
    WHERE s.id = NEW.service_id;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

--  Триггер для end_time
CREATE TRIGGER trg_set_booking_end_time
BEFORE INSERT OR UPDATE ON bookings
FOR EACH ROW
EXECUTE FUNCTION set_booking_end_time();

--  Функция tsrange_no_tz для использования в индексах
CREATE OR REPLACE FUNCTION tsrange_no_tz(TIMESTAMPTZ, TIMESTAMPTZ)
RETURNS TSRANGE AS
$$
  SELECT TSRANGE($1::TIMESTAMP, $2::TIMESTAMP, '[)');
$$ LANGUAGE sql IMMUTABLE STRICT;

--  Индекс для проверки пересечений
CREATE INDEX idx_bookings_tsranges
ON bookings USING GIST (
    tsrange_no_tz(booking_time, end_time)
);

--  Исключающее ограничение: один мастер – одна запись на слот времени
ALTER TABLE bookings
ADD CONSTRAINT no_overlapping_bookings
EXCLUDE USING GIST (
    master_id WITH =,
    tsrange_no_tz(booking_time, end_time) WITH &&
);